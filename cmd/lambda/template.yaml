AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  heartbeatmon

Parameters:
  S3BucketName:
    Type: String
    Default: heartbeatmon
    Description: Enter the name of S3 bucket to store credentials.
  HeartbeatDistributionDomain:
    Type: String
  HeartbeatDistributionDomainCertificateArn:
    Type: String
    Description: Arn of surving heartbeat certificate in us-east-1 region.

Resources:
  RefreshFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageConfig:
        EntryPoint: ["/app/lambda"]
      Architectures:
        - x86_64
      Role: !GetAtt HeartbeatmonIamRole.Arn
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ../../
      DockerTag: heartbeatmon

  RefreshFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !GetAtt RefreshFunction.Arn
        Principal: "events.amazonaws.com"
        SourceArn: !GetAtt HeartbeatmonRefreshRule.Arn

  HeartbeatmonIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: lambda-log
          PolicyDocument: {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
        - PolicyName: heartbeatmon-policy
          PolicyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:*",
                      "s3-object-lambda:*"
                    ],
                    "Resource": [
                      "Fn::Sub": "${HeartbeatmonBucket.Arn}",
                      "Fn::Sub": "${HeartbeatmonBucket.Arn}/*"
                    ]
                  }
                ]
              }

  HeartbeatmonBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: S3BucketName

  HeartbeatmonRefreshRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(10 minutes)"
      Targets:
        - Arn: !GetAtt RefreshFunction.Arn
          Id: !Ref S3BucketName
          Input: !Sub |
            {
              "region": "ap-northeast-1",
              "bucketName": "${S3BucketName}"
            }

  HeartbeatDistributionBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref HeartbeatmonBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3BucketName}/latest.json'
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${HeartbeatDistribution}'

  HeartbeatDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods: [HEAD, GET]
          CachedMethods: [HEAD, GET]
          CachePolicyId: !Ref HeartbeatDistributionCachePolicy
          TargetOriginId: !Sub heartbeatmon-${S3BucketName}-origin
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - Id: !Sub heartbeatmon-${S3BucketName}-origin
            DomainName: !GetAtt HeartbeatmonBucket.DomainName
            OriginAccessControlId: !Ref HeartbeatmonOAC
            S3OriginConfig:
              OriginAccessIdentity: ''
        Aliases:
          - !Ref HeartbeatDistributionDomain
        ViewerCertificate:
          AcmCertificateArn: !Ref HeartbeatDistributionDomainCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultRootObject: latest.json

  HeartbeatDistributionCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub HeartbeatmonDistributionCachePolicy-${S3BucketName}
        DefaultTTL: 60
        MaxTTL: 300
        MinTTL: 60
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  HeartbeatmonOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub HeartbeatmonOAC-${S3BucketName}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

Outputs:
  RefreshFunction:
    Description: "heartbeatmon refresh function ARN"
    Value: !GetAtt RefreshFunction.Arn
  HeartbeatmonIamRole:
    Description: "IAM Role created for heartbeatmon"
    Value: !GetAtt HeartbeatmonIamRole.Arn
  HeartbeatmonBucket:
    Description: "S3 bucket created for heartbeatmon"
    Value: !GetAtt HeartbeatmonBucket.Arn
  HeartbeatDistribution:
    Description: Heartbeat distribution domain name
    Value: !GetAtt HeartbeatDistribution.DomainName
